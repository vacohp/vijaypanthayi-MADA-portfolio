[
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About Me - Vijay Panthayi",
    "section": "",
    "text": "Hello! My name is Vijay Panthayi. Currently, I am twenty-two years of age and pursuing my masters degree in public health with a concentration in biostatistics. My long-term goal is to become a pediatric immunologist and my research interests are in allergies and allergy medication. To get there, I completed a bachelors in chemistry with a pre-med concentration and have done research and shadowing related to immunology and allergies.\nI currently have little to no programming knowledge (unless you count AP Comp Sci in high school). However, throughout my MPH degree, I have learned some basic level data analysis and moderate level statistical knowledge. I hope that this course not only ties together the knowledge I have learned previously, but I will be able to apply it into practice.\nHere is an interesting video I found regarding starting data analysis from scratch: How I Would Lean Data Analysis (If I Could Start Over)\nOutside of school and work, I play the Yu-Gi-Oh! card game competitively. It’s been very fun and has allowed me to travel and make friends I talk to almost daily."
  },
  {
    "objectID": "coding_exercise.html",
    "href": "coding_exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "#Load necessary packages\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(here)\n\nhere() starts at C:/Users/vjpan/Desktop/MADA/MADA2023/vijaypanthayi-MADA-portfolio\n\n#Load dslabs package\nlibrary(\"dslabs\")\n\n#Look at help file for gapminder data\nhelp(gapminder)\n\nstarting httpd help server ...\n\n\n done\n\n#Get an overview of data structure\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n#Get a summary of data\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n#Determine the type of object gapminder is\nclass(gapminder)\n\n[1] \"data.frame\"\n\n#Assign only countries in Africa to variable \"africadata\"\nafricadata <- subset(gapminder, continent == \"Africa\")\n\n#Run the str function on the africadata dataset\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n#Run the summary function on the africadata dataset\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n#Create a variable from africadata including only infant mortality and life expectancy\nafricadata_mort_life <- africadata[ , c(\"infant_mortality\",\"life_expectancy\")]\n\n#Create a variable from africadata including only population size and life expectancy\nafricadata_pop_life <- africadata[ , c(\"population\",\"life_expectancy\")]\n\n#Run the str function on the africadata_mort_life variable\nstr(africadata_mort_life)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n#Run the summary function on the africa_mort_life variable\nsummary(africadata_mort_life)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n#Run the str function on the africadata_pop_life variable\nstr(africadata_pop_life)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\n#Run the summary function on the africadata_pop_life variable\nsummary(africadata_pop_life)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51                         \n\n\n\n#Create a plot of life expectancy as a function of infant mortality (plot data as points)\nggplot(data=africadata_mort_life, aes(x=infant_mortality, y=life_expectancy)) +geom_point(size=2, shape=23)\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n#Create a plot of population size (log) as a function of infant mortality (plot data as points)\nggplot(data=africadata_pop_life,aes(x=population, y=life_expectancy)) +geom_point(size=2, shape=23)+scale_x_log10(\"population\")\n\nWarning: Removed 51 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n#Determine which years in the dataset have missing values\nafricadata_filtered <- africadata[is.na(africadata$infant_mortality),]\nafricadata_missing <- unique(africadata_filtered$year)\nprint(africadata_missing)\n\n [1] 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974\n[16] 1975 1976 1977 1978 1979 1980 1981 2016\n\n#Create a new variable with the data from africadata only including the year 2000\nafricadata_y2000 <- subset(africadata, year == 2000)\n\n#Run the str function on the africadata_y2000 variable\nstr(africadata_y2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n#Run the summary function on the africadata_y2000 variable\nsummary(africadata_y2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n\n\n#Create a plot of life expectancy as a function of infant mortality (plot data as points) for the year 2000\nggplot(data=africadata_y2000, aes(x=infant_mortality, y=life_expectancy)) +geom_point(size=2, shape=23)\n\n\n\n\n\n#Create a plot of population size (log) as a function of infant mortality (plot data as points) for the year 2000\nggplot(data=africadata_y2000,aes(x=population, y=life_expectancy)) +geom_point(size=2, shape=23)+scale_x_log10(\"population\")\n\n\n\n\n\n#Create a simple fit by setting life expectancy as the outcome and infant mortality as the predictory (using data from 2000 only)\nfit1 <- lm(life_expectancy~infant_mortality, data=africadata_y2000)\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africadata_y2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      71.29331    2.42611  29.386  < 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n#Create a simple fit by setting population as the outcome and infant mortality as the predictor (using data from 2000 only)\nfit2 <- lm(population~infant_mortality, data=africadata_y2000)\nsummary(fit2)\n\n\nCall:\nlm(formula = population ~ infant_mortality, data = africadata_y2000)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-16307667 -12769228  -7828854    733380 105710100 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(>|t|)\n(Intercept)      12063474    8682734   1.389    0.171\ninfant_mortality    45564     102671   0.444    0.659\n\nResidual standard error: 22260000 on 49 degrees of freedom\nMultiple R-squared:  0.004003,  Adjusted R-squared:  -0.01632 \nF-statistic: 0.1969 on 1 and 49 DF,  p-value: 0.6592\n\n#Based on the results from the fits, it appears that infant mortality is not a good predictor of either population or life expectancy\n\n\nThe following added by SETH LATTNER\nBased on the p-value (p=2.83e-08), I would actually conclude that infant mortality is actually a significant predictor of life expectancy.\n\nMore plotting\nI want to do a little more plotting with the gapminder data for fun.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.2.1\n✔ purrr     1.0.1     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n#calculate per capita GDP\ngdp_per_cap<-africadata$gdp/africadata$population\nsummary(gdp_per_cap)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  54.89  247.40  407.06  903.87  846.16 8527.47     637 \n\n#plot fertility vs per capita GDP for each region of Africa\nggplot(africadata, aes(gdp_per_cap, fertility, color=region))+\n  geom_point(cex=2, alpha=0.3)+\n  xlab(\"Per Capita GDP\")+\n  ylab(\"Fertility\")+\n  theme_classic()\n\nWarning: Removed 637 rows containing missing values (`geom_point()`).\n\n\n\n\n#model fertility vs per capita GDP for each region of Africa\nnew_fit<-lm(fertility~gdp_per_cap+region, data=africadata)\nsummary(new_fit)\n\n\nCall:\nlm(formula = fertility ~ gdp_per_cap + region, data = africadata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.1399 -0.6288  0.0433  0.7313  3.5206 \n\nCoefficients:\n                        Estimate Std. Error t value Pr(>|t|)    \n(Intercept)            6.457e+00  4.479e-02 144.164  < 2e-16 ***\ngdp_per_cap           -5.914e-04  1.848e-05 -31.996  < 2e-16 ***\nregionMiddle Africa    2.911e-01  7.016e-02   4.149 3.46e-05 ***\nregionNorthern Africa -6.518e-01  7.804e-02  -8.352  < 2e-16 ***\nregionSouthern Africa -5.947e-01  8.344e-02  -7.127 1.37e-12 ***\nregionWestern Africa   1.258e-01  5.764e-02   2.182   0.0292 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.065 on 2264 degrees of freedom\n  (637 observations deleted due to missingness)\nMultiple R-squared:  0.4127,    Adjusted R-squared:  0.4114 \nF-statistic: 318.2 on 5 and 2264 DF,  p-value: < 2.2e-16\n\ntable<-broom::tidy(new_fit)%>%\n  knitr::kable(digits=3)\ntable\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n6.457\n0.045\n144.164\n0.000\n\n\ngdp_per_cap\n-0.001\n0.000\n-31.996\n0.000\n\n\nregionMiddle Africa\n0.291\n0.070\n4.149\n0.000\n\n\nregionNorthern Africa\n-0.652\n0.078\n-8.352\n0.000\n\n\nregionSouthern Africa\n-0.595\n0.083\n-7.127\n0.000\n\n\nregionWestern Africa\n0.126\n0.058\n2.182\n0.029\n\n\n\n\n#Based on these results, GDP is a significant predictor of fertility for each region\n#of Africa. Obviously, there are many factors that would influence this, but this is\n#still an informative parameter."
  },
  {
    "objectID": "dataanalysis_exercise.html",
    "href": "dataanalysis_exercise.html",
    "title": "Data Analysis Exercise",
    "section": "",
    "text": "This dataset contains the age-adjusted death rates for the 10 leading causes of death in the United States beginning in 1999. The age-adjusted rates (per 100,000 population) were based on the 2000 standard population. While it contains an incredibly detailed report about all top 10 causes of death in each of the 50 states (and the District of Columbia) from 1999 to 2017, this data analysis will focus on the temporal trends of suicide rates in Georgia.\n\n\n\nFirst, we are going to load the necessary packages for this exercise.\n\n#loading the required packages\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at C:/Users/vjpan/Desktop/MADA/MADA2023/vijaypanthayi-MADA-portfolio\n\nlibrary(dplyr)\n\nNow we can read the original data set into R Studio.\n\n#loading the dataset into R\ntoptendeath <- read_csv(here(\"NCHS_-_Leading_Causes_of_Death__United_States.csv\"))\n\nRows: 10868 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): 113 Cause Name, Cause Name, State\ndbl (1): Year\nnum (2): Deaths, Age-adjusted Death Rate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(toptendeath)\n\nRows: 10,868\nColumns: 6\n$ Year                      <dbl> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 20…\n$ `113 Cause Name`          <chr> \"Accidents (unintentional injuries) (V01-X59…\n$ `Cause Name`              <chr> \"Unintentional injuries\", \"Unintentional inj…\n$ State                     <chr> \"United States\", \"Alabama\", \"Alaska\", \"Arizo…\n$ Deaths                    <dbl> 169936, 2703, 436, 4184, 1625, 13840, 3037, …\n$ `Age-adjusted Death Rate` <dbl> 49.4, 53.8, 63.7, 56.2, 51.8, 33.2, 53.6, 53…\n\n\n\n\n\nThe following steps will be to clean the data so that it only contains the factors we will be analyzing and that the data for those variables are clean/usable.\nFirst we are going to reclassify the categorical variables.\n\ntoptendeath <- toptendeath %>%\n    mutate(`113 Cause Name` = as.factor(`113 Cause Name`)) %>%\n    mutate(`Cause Name` = as.factor(`Cause Name`)) %>%\n    mutate(State = as.factor(State))\n\nglimpse(toptendeath)\n\nRows: 10,868\nColumns: 6\n$ Year                      <dbl> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 20…\n$ `113 Cause Name`          <fct> \"Accidents (unintentional injuries) (V01-X59…\n$ `Cause Name`              <fct> Unintentional injuries, Unintentional injuri…\n$ State                     <fct> United States, Alabama, Alaska, Arizona, Ark…\n$ Deaths                    <dbl> 169936, 2703, 436, 4184, 1625, 13840, 3037, …\n$ `Age-adjusted Death Rate` <dbl> 49.4, 53.8, 63.7, 56.2, 51.8, 33.2, 53.6, 53…\n\n\nNext, we are going to remove all data points that are not from Georgia. In addition, we are going to remove the 113 Cause Name, as that is not the cause of death category we are using.\n\nclean_toptendeath <- toptendeath %>% select(-(`113 Cause Name`))\nglimpse(clean_toptendeath)\n\nRows: 10,868\nColumns: 5\n$ Year                      <dbl> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 20…\n$ `Cause Name`              <fct> Unintentional injuries, Unintentional injuri…\n$ State                     <fct> United States, Alabama, Alaska, Arizona, Ark…\n$ Deaths                    <dbl> 169936, 2703, 436, 4184, 1625, 13840, 3037, …\n$ `Age-adjusted Death Rate` <dbl> 49.4, 53.8, 63.7, 56.2, 51.8, 33.2, 53.6, 53…\n\nga_clean_toptendeath <- subset(clean_toptendeath, clean_toptendeath$State == \"Georgia\")\nglimpse(ga_clean_toptendeath)\n\nRows: 209\nColumns: 5\n$ Year                      <dbl> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 20…\n$ `Cause Name`              <fct> Unintentional injuries, All causes, Alzheime…\n$ State                     <fct> Georgia, Georgia, Georgia, Georgia, Georgia,…\n$ Deaths                    <dbl> 4712, 83098, 4290, 4399, 4866, 2348, 18389, …\n$ `Age-adjusted Death Rate` <dbl> 45.2, 793.7, 46.0, 43.5, 46.2, 21.5, 175.8, …\n\nga_suicide <- subset(ga_clean_toptendeath, ga_clean_toptendeath$`Cause Name` == \"Suicide\")\nglimpse(ga_suicide)\n\nRows: 19\nColumns: 5\n$ Year                      <dbl> 2017, 2016, 2015, 2014, 2013, 2012, 2011, 20…\n$ `Cause Name`              <fct> Suicide, Suicide, Suicide, Suicide, Suicide,…\n$ State                     <fct> Georgia, Georgia, Georgia, Georgia, Georgia,…\n$ Deaths                    <dbl> 1451, 1409, 1317, 1295, 1212, 1168, 1157, 11…\n$ `Age-adjusted Death Rate` <dbl> 13.6, 13.3, 12.7, 12.6, 12.0, 11.7, 11.7, 11…\n\n\nThis step created three different data set variables: clean_toptendeath is the original data set without the “113 Cause Name” column ga_clean_toptendeath is the clean_toptendeath but only with the observations regarding Georgia ga_suicide is the ga_clean_toptendeath but only with the observations regarding suicide\nNow that the data is cleaned and only contains the yearly suicide deaths in Georgia from 1999 - 2017, we can save this new data set.\n\nga_suicide %>% saveRDS(here::here(\"ga_suicide.rds\"))\n\n\n\n\nThe following added by SETH LATTNER\nFirst, I want to get an idea of the yearly trends in suicide deaths in GA, based on the clean RDS file created by Vijay. To do this, I will plot both suicide deaths and age-adjusted suicide death rate in GA versus year.\n\nlibrary(ggplot2)\n\nga_suicide_data <- readRDS(here::here(\"ga_suicide.rds\"))\n\nggplot(ga_suicide_data, aes(Year, Deaths))+\n  geom_line(size = 1.5, color=\"darkcyan\")+\n  xlab(\"Year\")+\n  ylab(\"Deaths\")+\n  labs(title = \"Suicide Deaths in GA, 1999-2017\")+\n  theme_bw()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\nggplot(ga_suicide_data, aes(Year, `Age-adjusted Death Rate`))+\n  geom_line(size = 1.5, color=\"plum\")+\n  xlab(\"Year\")+\n  ylab(\"Age-Adjusted Death Rate\")+\n  labs(title = \"Age-Adjusted Suicide Death Rate in GA, 1999-2017\")+\n  theme_bw()\n\n\n\n\nThere appears to be an increase in both suicide deaths and age-adjusted suicide death rates in GA during the study period. I will do some simple modeling to determine if there is any statistical correlation.\n\n#linear model of suicide deaths vs year\nsuicide_model <- lm(Deaths~Year, data = ga_suicide_data)\nsummary(suicide_model)\n\n\nCall:\nlm(formula = Deaths ~ Year, data = ga_suicide_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-103.74  -36.24   12.94   33.04   83.25 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -62058.06    4880.06  -12.72 4.12e-10 ***\nYear            31.45       2.43   12.94 3.15e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 58.02 on 17 degrees of freedom\nMultiple R-squared:  0.9078,    Adjusted R-squared:  0.9024 \nF-statistic: 167.4 on 1 and 17 DF,  p-value: 3.152e-10\n\n#linear model of age-adjusted suicide death rate vs year\ndeath_rate_model <- lm(`Age-adjusted Death Rate`~Year, data = ga_suicide_data)\nsummary(death_rate_model)\n\n\nCall:\nlm(formula = `Age-adjusted Death Rate` ~ Year, data = ga_suicide_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.2158 -0.3530  0.1593  0.4218  0.8600 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -239.2081    51.8124  -4.617 0.000246 ***\nYear           0.1249     0.0258   4.841 0.000153 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.616 on 17 degrees of freedom\nMultiple R-squared:  0.5796,    Adjusted R-squared:  0.5548 \nF-statistic: 23.44 on 1 and 17 DF,  p-value: 0.000153\n\n\nNow I want to plot these models against the data.\n\nggplot(ga_suicide_data, aes(Year, Deaths))+\n  geom_point(cex=3)+\n  geom_smooth(method = \"lm\", color = \"darkcyan\")+\n  xlab(\"Year\")+\n  ylab(\"Deaths\")+\n  labs(title = \"Suicide Deaths in GA, 1999-2017\")+\n  theme_bw()\n\n\n\nggplot(ga_suicide_data, aes(Year, `Age-adjusted Death Rate`))+\n  geom_point(cex=3)+\n  geom_smooth(method = \"lm\", color = \"plum\")+\n  xlab(\"Year\")+\n  ylab(\"Age-Adjusted Death Rate\")+\n  labs(title = \"Age-Adjusted Suicide Death Rate in GA, 1999-2017\")+\n  theme_bw()\n\n\n\n\nWhile this analysis was rather rudimentary based on the dataset at hand, the inclusion of additional covariates from related datasets could yield more informative results. Overall however, there was a statistically significant increase in the number of suicide deaths and the age-adjusted suicide death rate in GA between the years 1999 and 2017."
  },
  {
    "objectID": "fluanalysis/code/exploration.html",
    "href": "fluanalysis/code/exploration.html",
    "title": "Flu Data Analysis",
    "section": "",
    "text": "Before we explore the data set, lets load the necessary packages for exploration.\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(here)\nlibrary(dplyr)\n\nNow, we can load the processed data set to explore.\n\nflu_clean <- readRDS(here::here(\"fluanalysis\",\"data\",\"processed_data\",\"flu_data_processed\"))\nglimpse(flu_clean)\n\nRows: 730\nColumns: 32\n$ SwollenLymphNodes <fct> Yes, Yes, Yes, Yes, Yes, No, No, No, Yes, No, Yes, Y…\n$ ChestCongestion   <fct> No, Yes, Yes, Yes, No, No, No, Yes, Yes, Yes, Yes, Y…\n$ ChillsSweats      <fct> No, No, Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, Yes, …\n$ NasalCongestion   <fct> No, Yes, Yes, Yes, No, No, No, Yes, Yes, Yes, Yes, Y…\n$ CoughYN           <fct> Yes, Yes, No, Yes, No, Yes, Yes, Yes, Yes, Yes, No, …\n$ Sneeze            <fct> No, No, Yes, Yes, No, Yes, No, Yes, No, No, No, No, …\n$ Fatigue           <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ SubjectiveFever   <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, Yes…\n$ Headache          <fct> Yes, Yes, Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes…\n$ Weakness          <fct> Mild, Severe, Severe, Severe, Moderate, Moderate, Mi…\n$ WeaknessYN        <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ CoughIntensity    <fct> Severe, Severe, Mild, Moderate, None, Moderate, Seve…\n$ CoughYN2          <fct> Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes, Yes, Yes…\n$ Myalgia           <fct> Mild, Severe, Severe, Severe, Mild, Moderate, Mild, …\n$ MyalgiaYN         <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ RunnyNose         <fct> No, No, Yes, Yes, No, No, Yes, Yes, Yes, Yes, No, No…\n$ AbPain            <fct> No, No, Yes, No, No, No, No, No, No, No, Yes, Yes, N…\n$ ChestPain         <fct> No, No, Yes, No, No, Yes, Yes, No, No, No, No, Yes, …\n$ Diarrhea          <fct> No, No, No, No, No, Yes, No, No, No, No, No, No, No,…\n$ EyePn             <fct> No, No, No, No, Yes, No, No, No, No, No, Yes, No, Ye…\n$ Insomnia          <fct> No, No, Yes, Yes, Yes, No, No, Yes, Yes, Yes, Yes, Y…\n$ ItchyEye          <fct> No, No, No, No, No, No, No, No, No, No, No, No, Yes,…\n$ Nausea            <fct> No, No, Yes, Yes, Yes, Yes, No, No, Yes, Yes, Yes, Y…\n$ EarPn             <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, Yes, Y…\n$ Hearing           <fct> No, Yes, No, No, No, No, No, No, No, No, No, No, No,…\n$ Pharyngitis       <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, No, No, Yes, …\n$ Breathless        <fct> No, No, Yes, No, No, Yes, No, No, No, Yes, No, Yes, …\n$ ToothPn           <fct> No, No, Yes, No, No, No, No, No, Yes, No, No, Yes, N…\n$ Vision            <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n$ Vomit             <fct> No, No, No, No, No, No, Yes, No, No, No, Yes, Yes, N…\n$ Wheeze            <fct> No, No, No, Yes, No, Yes, No, No, No, No, No, Yes, N…\n$ BodyTemp          <dbl> 98.3, 100.4, 100.8, 98.8, 100.5, 98.4, 102.5, 98.4, …\n\n\n\nData Exploration\n\n-Outcomes of Interest-\nThe following are the outcomes of interest:\nBody Temperature (continuous)\nNausea (categorical)\n\n\n-Summary Statistics-\nOur goal is to determine how the other symptoms of flu correlate with body temperature and nausea. To do this, we should first look at the summary statistics of body temperature and nausea.\nLet’s start with body temperature. We will begin with plotting the data for body temperature to visualize the distribution.\n\nflu_clean %>%\n  ggplot() +\n  geom_histogram(aes(BodyTemp)) +\n  theme_bw() +\n  ylab(NULL)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nWe can see from this histogram that the majority of subjects exhibit normal (98.6 degrees Fahrenheit) body temperatures.\nLet’s see how many subjects are considered to have a fever (equal to or greater than 100.4 degrees Fahrenheit).\n\nflu_clean %>% count(BodyTemp > 100.4)\n\n  BodyTemp > 100.4   n\n1            FALSE 652\n2             TRUE  78\n\n\nWe can see that out of the 730 observations, only 78 of them are considered to have a fever.\nNow lets take a look at nausea. We can do a quick count of the Nausea data to give us an idea of its distribution.\n\n#Shows the counts\nprint(flu_clean %>% count(Nausea))\n\n  Nausea   n\n1     No 475\n2    Yes 255\n\n\n\n#Shows the percentages\nwith(flu_clean,table(Nausea)) %>%\n    prop.table()\n\nNausea\n       No       Yes \n0.6506849 0.3493151 \n\n\nApproximately two-thirds of the observations did not exhibited nausea.\n\n\n-Plotting Outcome of Interest Against Predictors-\nNow that we have explored the two main outcomes and their distributions, we can plot these outcomes against predictors.\nWe can do this by plotting body temperature and nausea, respectively, against each predictor.\nFor body temperature, a box plot will be used to compare between body temperature and the predictors since it is a continuous variable. We are looking for differences in the quartiles and the mean between the box plots produced. A large difference may indicate that a predictor correlates with an increase/decrease in body temperature.\nFor nausea, a stacked box plot will allow for quick visual comparison between nausea and the predictor since nausea is a categorical variable. A comparison of the proportion of a correlation will be present if there is a significant proportion of observations experiencing the predictor AND nausea simultaneously (or experiencing neither). If the predictor is largely present when nausea isn’t, it can be considered a predictor of lack of nausea (or vice-versa).\n\n1. Abdominal Pain\n\n#Stacked histogram of nausea vs. abdominal pain\nggplot(flu_clean, aes(Nausea))+\n  geom_histogram(aes(fill=AbPain), stat = \"count\") +\n  theme_bw() +\n  ylab(NULL)\n\nWarning in geom_histogram(aes(fill = AbPain), stat = \"count\"): Ignoring unknown\nparameters: `binwidth`, `bins`, and `pad`\n\n\n\n\n\n\n#Boxplot of body temperature vs. abdominal pain\nggplot(flu_clean, aes(BodyTemp, AbPain))+\n  geom_boxplot(fill=\"lightblue\")+\n  theme_classic()\n\n\n\n\nThere appears to be no correlation between abdominal pain and body temperature or nausea. It is worth noting the number of outliers in the higher body temperature ranges for those without abdominal pain.\n\n\n2. Vomiting\n\n#Stacked histogram of nausea vs. vomiting\nggplot(flu_clean, aes(Nausea))+\n  geom_histogram(aes(fill=Vomit), stat = \"count\") +\n  theme_bw() +\n  ylab(NULL)\n\nWarning in geom_histogram(aes(fill = Vomit), stat = \"count\"): Ignoring unknown\nparameters: `binwidth`, `bins`, and `pad`\n\n\n\n\n\n\n#Boxplot of body temperature vs. abdominal pain\nggplot(flu_clean, aes(BodyTemp, Vomit))+\n  geom_boxplot(fill=\"lightgreen\")+\n  theme_classic()\n\n\n\n\nThere appears to be a considerably larger proportion of people who are vomitin with those experiencing nausea. This indicates a correlation between the two. In addition, while there is no drastic difference between body temperature means, there is a considerably larger number of outliers in the higher body temperatures for those who are not experiencing vomiting.\n\n\n3. Fatigue\n\n#Stacked histogram of nausea vs. fatigue\nggplot(flu_clean, aes(Nausea))+\n  geom_histogram(aes(fill=Fatigue), stat = \"count\") +\n  theme_bw() +\n  ylab(NULL)\n\nWarning in geom_histogram(aes(fill = Fatigue), stat = \"count\"): Ignoring unknown\nparameters: `binwidth`, `bins`, and `pad`\n\n\n\n\n\n\n#Boxplot of body temperature vs. abdominal pain\nggplot(flu_clean, aes(BodyTemp, Fatigue))+\n  geom_boxplot(fill=\"lightgrey\")+\n  theme_classic()\n\n\n\n\nThere appears to be a large correlation between fatigue and nausea. However, a majority of those who are not experiencing nausea are still experiencing fatigue. It is difficult to ascertain a correlation from this information. On the other end, there is a significant difference in the box plots. It appears that there is a correlation between experiencing fatigue and having higher body temperatures.\n\n\n4. Weakness\n\n#Stacked histogram of nausea vs. weakness status\nggplot(flu_clean, aes(Nausea))+\n  geom_histogram(aes(fill=Weakness), stat = \"count\") +\n  theme_bw() +\n  ylab(NULL)\n\nWarning in geom_histogram(aes(fill = Weakness), stat = \"count\"): Ignoring\nunknown parameters: `binwidth`, `bins`, and `pad`\n\n\n\n\n\n\n#Boxplot of body temperature vs. abdominal pain\nggplot(flu_clean, aes(BodyTemp, Weakness))+\n  geom_boxplot(fill=\"tan\")+\n  theme_classic()\n\n\n\n\nThere appears to be a correlation between high levels of weakness (severe, moderate) and experiencing nausea. In addition, any weakness level also appears to experience higher body temperatures on average compared to feeling no weakness at all."
  },
  {
    "objectID": "fluanalysis/code/fitting.html",
    "href": "fluanalysis/code/fitting.html",
    "title": "Flu Data Analysis",
    "section": "",
    "text": "Model Fitting\nFor the purpose of this exercise, the main predictor of interest is going to be RunnyNose and that we care about all other predictors. We are going to fit models with each of the two outcomes (body temperature and nausea) and RunnyNose. In addition, we are going to fit models with each of the two outcomes (body temperature and nausea) with all predictors. While fitting to one outcome, the other outcome will be considered a predictor (ex. when fitting predictors to body temperature, nausea will be considered a predictor).\nThis should all be completed with the tidymodels framework. We will be using the following commands:\nlinear_reg()\nset_engine(\"lm\")\nlogistic_reg()\nset_engine(\"glm\")\n\n1. Load Data + Fitting Prep\nFirst, lets load the packages needed for the fitting.\n\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(here)\nlibrary(parsnip)\nlibrary(dotwhisker)\nlibrary(performance)\n\nNow, we can load and preview the processed data set.\n\nflu_clean <- readRDS(here::here(\"fluanalysis\", \"data\",\"processed_data\", \"flu_data_processed\"))\nglimpse(flu_clean)\n\nRows: 730\nColumns: 32\n$ SwollenLymphNodes <fct> Yes, Yes, Yes, Yes, Yes, No, No, No, Yes, No, Yes, Y…\n$ ChestCongestion   <fct> No, Yes, Yes, Yes, No, No, No, Yes, Yes, Yes, Yes, Y…\n$ ChillsSweats      <fct> No, No, Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, Yes, …\n$ NasalCongestion   <fct> No, Yes, Yes, Yes, No, No, No, Yes, Yes, Yes, Yes, Y…\n$ CoughYN           <fct> Yes, Yes, No, Yes, No, Yes, Yes, Yes, Yes, Yes, No, …\n$ Sneeze            <fct> No, No, Yes, Yes, No, Yes, No, Yes, No, No, No, No, …\n$ Fatigue           <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ SubjectiveFever   <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, Yes…\n$ Headache          <fct> Yes, Yes, Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes…\n$ Weakness          <fct> Mild, Severe, Severe, Severe, Moderate, Moderate, Mi…\n$ WeaknessYN        <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ CoughIntensity    <fct> Severe, Severe, Mild, Moderate, None, Moderate, Seve…\n$ CoughYN2          <fct> Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes, Yes, Yes…\n$ Myalgia           <fct> Mild, Severe, Severe, Severe, Mild, Moderate, Mild, …\n$ MyalgiaYN         <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ RunnyNose         <fct> No, No, Yes, Yes, No, No, Yes, Yes, Yes, Yes, No, No…\n$ AbPain            <fct> No, No, Yes, No, No, No, No, No, No, No, Yes, Yes, N…\n$ ChestPain         <fct> No, No, Yes, No, No, Yes, Yes, No, No, No, No, Yes, …\n$ Diarrhea          <fct> No, No, No, No, No, Yes, No, No, No, No, No, No, No,…\n$ EyePn             <fct> No, No, No, No, Yes, No, No, No, No, No, Yes, No, Ye…\n$ Insomnia          <fct> No, No, Yes, Yes, Yes, No, No, Yes, Yes, Yes, Yes, Y…\n$ ItchyEye          <fct> No, No, No, No, No, No, No, No, No, No, No, No, Yes,…\n$ Nausea            <fct> No, No, Yes, Yes, Yes, Yes, No, No, Yes, Yes, Yes, Y…\n$ EarPn             <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, Yes, Y…\n$ Hearing           <fct> No, Yes, No, No, No, No, No, No, No, No, No, No, No,…\n$ Pharyngitis       <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, No, No, Yes, …\n$ Breathless        <fct> No, No, Yes, No, No, Yes, No, No, No, Yes, No, Yes, …\n$ ToothPn           <fct> No, No, Yes, No, No, No, No, No, Yes, No, No, Yes, N…\n$ Vision            <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n$ Vomit             <fct> No, No, No, No, No, No, Yes, No, No, No, Yes, Yes, N…\n$ Wheeze            <fct> No, No, No, Yes, No, Yes, No, No, No, No, No, Yes, N…\n$ BodyTemp          <dbl> 98.3, 100.4, 100.8, 98.8, 100.5, 98.4, 102.5, 98.4, …\n\n\nFinally, we can use set_engine() to create general linear and logistic models.\n\nlinear <- linear_reg() %>% \n              set_engine(\"lm\")\nlogistic <- logistic_reg() %>%\n              set_engine(\"glm\")\n\n\n\n2. Linear Model Fitting\nWe are going to fit a linear model to the continuous outcome, body temperature, using the main predictor of interest, runny nose.\n\nlm_fit_rn <- linear %>%\n              fit(BodyTemp~RunnyNose,data=flu_clean)\nlm_fit_rn\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = BodyTemp ~ RunnyNose, data = data)\n\nCoefficients:\n (Intercept)  RunnyNoseYes  \n     99.1431       -0.2926  \n\n\n\n\n3. Linear Model Fitting (cont.)\nNow we are going to fit a linear model to the continuous outcome, body temperature, using all the predictors.\n\nlm_fit_all <- linear %>%\n              fit(BodyTemp~ . ,data=flu_clean)\nlm_fit_all\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = BodyTemp ~ ., data = data)\n\nCoefficients:\n           (Intercept)    SwollenLymphNodesYes      ChestCongestionYes  \n             97.925243               -0.165302                0.087326  \n       ChillsSweatsYes      NasalCongestionYes              CoughYNYes  \n              0.201266               -0.215771                0.313893  \n             SneezeYes              FatigueYes      SubjectiveFeverYes  \n             -0.361924                0.264762                0.436837  \n           HeadacheYes            WeaknessMild        WeaknessModerate  \n              0.011453                0.018229                0.098944  \n        WeaknessSevere           WeaknessYNYes      CoughIntensityMild  \n              0.373435                      NA                0.084881  \nCoughIntensityModerate    CoughIntensitySevere             CoughYN2Yes  \n             -0.061384               -0.037272                      NA  \n           MyalgiaMild         MyalgiaModerate           MyalgiaSevere  \n              0.164242               -0.024064               -0.129263  \n          MyalgiaYNYes            RunnyNoseYes               AbPainYes  \n                    NA               -0.080485                0.031574  \n          ChestPainYes             DiarrheaYes                EyePnYes  \n              0.105071               -0.156806                0.131544  \n           InsomniaYes             ItchyEyeYes               NauseaYes  \n             -0.006824               -0.008016               -0.034066  \n              EarPnYes              HearingYes          PharyngitisYes  \n              0.093790                0.232203                0.317581  \n         BreathlessYes              ToothPnYes               VisionYes  \n              0.090526               -0.022876               -0.274625  \n              VomitYes               WheezeYes  \n              0.165272               -0.046665  \n\n\n\n\n4. Linear Model Comparisons\n\nlm_fit_rn\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = BodyTemp ~ RunnyNose, data = data)\n\nCoefficients:\n (Intercept)  RunnyNoseYes  \n     99.1431       -0.2926  \n\nlm_fit_all\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = BodyTemp ~ ., data = data)\n\nCoefficients:\n           (Intercept)    SwollenLymphNodesYes      ChestCongestionYes  \n             97.925243               -0.165302                0.087326  \n       ChillsSweatsYes      NasalCongestionYes              CoughYNYes  \n              0.201266               -0.215771                0.313893  \n             SneezeYes              FatigueYes      SubjectiveFeverYes  \n             -0.361924                0.264762                0.436837  \n           HeadacheYes            WeaknessMild        WeaknessModerate  \n              0.011453                0.018229                0.098944  \n        WeaknessSevere           WeaknessYNYes      CoughIntensityMild  \n              0.373435                      NA                0.084881  \nCoughIntensityModerate    CoughIntensitySevere             CoughYN2Yes  \n             -0.061384               -0.037272                      NA  \n           MyalgiaMild         MyalgiaModerate           MyalgiaSevere  \n              0.164242               -0.024064               -0.129263  \n          MyalgiaYNYes            RunnyNoseYes               AbPainYes  \n                    NA               -0.080485                0.031574  \n          ChestPainYes             DiarrheaYes                EyePnYes  \n              0.105071               -0.156806                0.131544  \n           InsomniaYes             ItchyEyeYes               NauseaYes  \n             -0.006824               -0.008016               -0.034066  \n              EarPnYes              HearingYes          PharyngitisYes  \n              0.093790                0.232203                0.317581  \n         BreathlessYes              ToothPnYes               VisionYes  \n              0.090526               -0.022876               -0.274625  \n              VomitYes               WheezeYes  \n              0.165272               -0.046665  \n\ncompare_performance(lm_fit_rn,lm_fit_all)\n\n# Comparison of Model Performance Indices\n\nName       | Model |      AIC | AIC weights |      BIC | BIC weights |    R2 | R2 (adj.) |  RMSE | Sigma\n--------------------------------------------------------------------------------------------------------\nlm_fit_rn  |   _lm | 2329.346 |    2.89e-06 | 2343.125 |        1.00 | 0.012 |     0.011 | 1.188 | 1.190\nlm_fit_all |   _lm | 2303.840 |       1.000 | 2469.189 |    4.22e-28 | 0.129 |     0.086 | 1.116 | 1.144\n\n\n\n\n5. Logistic Model Fitting\n\nglm_fit_rn <- logistic %>%\n              fit(Nausea~RunnyNose,data=flu_clean)\nglm_fit_rn\n\nparsnip model object\n\n\nCall:  stats::glm(formula = Nausea ~ RunnyNose, family = stats::binomial, \n    data = data)\n\nCoefficients:\n (Intercept)  RunnyNoseYes  \n    -0.65781       0.05018  \n\nDegrees of Freedom: 729 Total (i.e. Null);  728 Residual\nNull Deviance:      944.7 \nResidual Deviance: 944.6    AIC: 948.6\n\n\n\n\n6. Logistic Model Fitting (cont.)\n\nglm_fit_all <- logistic %>%\n              fit(Nausea~ . ,data=flu_clean)\nglm_fit_all\n\nparsnip model object\n\n\nCall:  stats::glm(formula = Nausea ~ ., family = stats::binomial, data = data)\n\nCoefficients:\n           (Intercept)    SwollenLymphNodesYes      ChestCongestionYes  \n              0.222870               -0.251083                0.275554  \n       ChillsSweatsYes      NasalCongestionYes              CoughYNYes  \n              0.274097                0.425817               -0.140423  \n             SneezeYes              FatigueYes      SubjectiveFeverYes  \n              0.176724                0.229062                0.277741  \n           HeadacheYes            WeaknessMild        WeaknessModerate  \n              0.331259               -0.121606                0.310849  \n        WeaknessSevere           WeaknessYNYes      CoughIntensityMild  \n              0.823187                      NA               -0.220794  \nCoughIntensityModerate    CoughIntensitySevere             CoughYN2Yes  \n             -0.362678               -0.950544                      NA  \n           MyalgiaMild         MyalgiaModerate           MyalgiaSevere  \n             -0.004146                0.204743                0.120758  \n          MyalgiaYNYes            RunnyNoseYes               AbPainYes  \n                    NA                0.045324                0.939304  \n          ChestPainYes             DiarrheaYes                EyePnYes  \n              0.070777                1.063934               -0.341991  \n           InsomniaYes             ItchyEyeYes                EarPnYes  \n              0.084175               -0.063364               -0.181719  \n            HearingYes          PharyngitisYes           BreathlessYes  \n              0.323052                0.275364                0.526801  \n            ToothPnYes               VisionYes                VomitYes  \n              0.480649                0.125498                2.458466  \n             WheezeYes                BodyTemp  \n             -0.304435               -0.031246  \n\nDegrees of Freedom: 729 Total (i.e. Null);  695 Residual\nNull Deviance:      944.7 \nResidual Deviance: 751.5    AIC: 821.5\n\n\n\n\n7. Logistic Model Comparisons\n\nglm_fit_rn\n\nparsnip model object\n\n\nCall:  stats::glm(formula = Nausea ~ RunnyNose, family = stats::binomial, \n    data = data)\n\nCoefficients:\n (Intercept)  RunnyNoseYes  \n    -0.65781       0.05018  \n\nDegrees of Freedom: 729 Total (i.e. Null);  728 Residual\nNull Deviance:      944.7 \nResidual Deviance: 944.6    AIC: 948.6\n\nglm_fit_all\n\nparsnip model object\n\n\nCall:  stats::glm(formula = Nausea ~ ., family = stats::binomial, data = data)\n\nCoefficients:\n           (Intercept)    SwollenLymphNodesYes      ChestCongestionYes  \n              0.222870               -0.251083                0.275554  \n       ChillsSweatsYes      NasalCongestionYes              CoughYNYes  \n              0.274097                0.425817               -0.140423  \n             SneezeYes              FatigueYes      SubjectiveFeverYes  \n              0.176724                0.229062                0.277741  \n           HeadacheYes            WeaknessMild        WeaknessModerate  \n              0.331259               -0.121606                0.310849  \n        WeaknessSevere           WeaknessYNYes      CoughIntensityMild  \n              0.823187                      NA               -0.220794  \nCoughIntensityModerate    CoughIntensitySevere             CoughYN2Yes  \n             -0.362678               -0.950544                      NA  \n           MyalgiaMild         MyalgiaModerate           MyalgiaSevere  \n             -0.004146                0.204743                0.120758  \n          MyalgiaYNYes            RunnyNoseYes               AbPainYes  \n                    NA                0.045324                0.939304  \n          ChestPainYes             DiarrheaYes                EyePnYes  \n              0.070777                1.063934               -0.341991  \n           InsomniaYes             ItchyEyeYes                EarPnYes  \n              0.084175               -0.063364               -0.181719  \n            HearingYes          PharyngitisYes           BreathlessYes  \n              0.323052                0.275364                0.526801  \n            ToothPnYes               VisionYes                VomitYes  \n              0.480649                0.125498                2.458466  \n             WheezeYes                BodyTemp  \n             -0.304435               -0.031246  \n\nDegrees of Freedom: 729 Total (i.e. Null);  695 Residual\nNull Deviance:      944.7 \nResidual Deviance: 751.5    AIC: 821.5\n\ncompare_performance(glm_fit_rn,glm_fit_all)\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from a rank-deficient fit may be misleading\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from a rank-deficient fit may be misleading\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from a rank-deficient fit may be misleading\n\n\n# Comparison of Model Performance Indices\n\nName        | Model |     AIC | AIC weights |     BIC | BIC weights | Tjur's R2 |  RMSE | Sigma | Log_loss | Score_log | Score_spherical |   PCP\n------------------------------------------------------------------------------------------------------------------------------------------------\nglm_fit_rn  |  _glm | 948.566 |    2.52e-28 | 957.752 |       1.000 | 1.169e-04 | 0.477 | 1.139 |    0.647 |  -107.871 |           0.012 | 0.545\nglm_fit_all |  _glm | 821.471 |        1.00 | 982.227 |    4.84e-06 |     0.247 | 0.414 | 1.040 |    0.515 |      -Inf |           0.002 | 0.658"
  },
  {
    "objectID": "fluanalysis/code/modeleval.html",
    "href": "fluanalysis/code/modeleval.html",
    "title": "Flu Data Analysis",
    "section": "",
    "text": "Model Improvement\nFirst, lets load the necessary packages for this process\n\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(tidymodels)\nlibrary(tidyverse)\n\nNext, we will load the processed flu data from the processed_data folder.\n\nflu_clean <- readRDS(here::here(\"fluanalysis\",\"data\",\"processed_data\",\"flu_data_processed\"))\n\n\nData Splitting\nWe’ll then need to find a way to create a testing data set from flu_clean. We will use this data to test the generated model. The rest of the data will become the training data set.\nTo do this, we will use set.seed() so the analysis is reproducible when random numbers are used. initial_split() will be used to split the data.\n\nset.seed(223)\ndata_split <- initial_split(flu_clean,prop=3/4)\ntraining_data <- training(data_split)\ntest_data <- testing(data_split)\n\n\n\nWorkflow Creation and Model Fitting\nWe will use tidymodels to generate our logistic regression model. We will use recipe() and worklfow() to create the workflow.\n\n# Initiate a new recipe\nlogit_recipe <- recipe(Nausea ~ ., data = training_data)\n# Create the logistic regression model\nlogistic <- logistic_reg() %>%\n             set_engine(\"glm\")\n# Create the workflow\nflu_wflow <- \n      workflow() %>%\n      add_model(logistic) %>%\n        add_recipe(logit_recipe)\nflu_wflow\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n\n\n\n\nModel 1 Evaluation\nNow that we have created the workflow, we can fit the model to the training and test data sets created previously.\n\ntraining_fit <- flu_wflow %>%\n                fit(data = training_data)\ntest_fit <- flu_wflow %>%\n                fit(data = test_data)\n\nThe next step is to use the trained workflows, training_fit, to predict with unseen test data.\n\npredict(training_fit, test_data)\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from a rank-deficient fit may be misleading\n\n\n# A tibble: 183 × 1\n   .pred_class\n   <fct>      \n 1 No         \n 2 Yes        \n 3 No         \n 4 No         \n 5 No         \n 6 Yes        \n 7 No         \n 8 No         \n 9 No         \n10 Yes        \n# ℹ 173 more rows\n\n\nWe now want to compare the estimates. To do this, we use augment().\n\ntraining_aug <- augment(training_fit, training_data)\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from a rank-deficient fit may be misleading\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from a rank-deficient fit may be misleading\n\ntest_aug <- augment(test_fit, test_data)\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from a rank-deficient fit may be misleading\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from a rank-deficient fit may be misleading\n\n\nIf we want to assess how well the model makes predictions, we can us an ROC curve. roc_curev() and autoplot() commands create an ROC curve which we can use to evaluate the model on the training_data and the test_data. A ROC-AUC value of 0.5 is bad, whereas a value of 1.0 is perfect. Ideally, a value greater than 0.7 is desired.\n\ntraining_aug %>%\n      roc_curve(truth = Nausea, .pred_No) %>%\n      autoplot()\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\nℹ The deprecated feature was likely used in the yardstick package.\n  Please report the issue at <https://github.com/tidymodels/yardstick/issues>.\n\n\n\n\n\n\ntraining_aug %>%\n      roc_auc(truth = Nausea, .pred_No)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.780\n\n\nNow, same for test_data.\n\ntest_aug %>%\n      roc_curve(truth = Nausea, .pred_No) %>%\n      autoplot()\n\n\n\n\n\ntest_aug %>%\n      roc_auc(truth = Nausea, .pred_No)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.866\n\n\nThe model appears to predict the data well since both the training and test data have an ROC-AUC >0.7.\n\n\nAlternative Model\nNow, lets repeat these steps with only 1 predictor.\n\nlogit_recipe1 <- recipe(Nausea ~ RunnyNose, data = training_data)\n\nflu_wflow1 <- \n        workflow() %>%\n        add_model(logistic) %>%\n        add_recipe(logit_recipe1)\n\ntraining_fit1 <- flu_wflow1 %>%\n        fit(data = training_data)\n\ntest_fit1 <- flu_wflow1 %>%\n        fit(data = test_data)\n\ntraining_aug1 <- augment(training_fit1, training_data)\ntest_aug1 <- augment(test_fit1, test_data)\n\nLets create the ROC for the training set.\n\ntraining_aug1 %>%\n      roc_curve(truth = Nausea, .pred_No) %>%\n      autoplot()\n\n\n\n\n\ntraining_aug1 %>%\n      roc_auc(truth = Nausea, .pred_No)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.507\n\n\nLets create the ROC for the test set.\n\ntest_aug1 %>%\n      roc_curve(truth = Nausea, .pred_No) %>%\n      autoplot()\n\n\n\n\n\ntest_aug1 %>%\n      roc_auc(truth = Nausea, .pred_No)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.541\n\n\nBoth ROC-AUC values were close to 0.5, which means this model is not a good fit.\n\n\nPart II. Linear Regression.This section added by Betelihem G.\n\n\nData Splitting\nWe’ll then need to find a way to create a testing data set from flu_clean. We will use this data to test the generated model. The rest of the data will become the training data set.\nTo do this, we will use set.seed() so the analysis is reproducible when random numbers are used. initial_split() will be used to split the data.\n\nset.seed(253)\ndata_split1 <- initial_split(flu_clean,prop=3/4)\ntraining_data1 <- training(data_split1)\ntest_data1 <- testing(data_split1)\n\n\n\nWorkflow Creation and Model Fitting\nWe will use tidymodels to generate our logistic regression model. We will use recipe() and worklfow() to create the workflow.\n\n# Initiate a new recipe with the continous outcome\nlinear_recipe <- recipe(BodyTemp ~ ., data = training_data1)\n# Create the linear regression model\nlinear <- linear_reg() %>%\n             set_engine(\"lm\")\n\n\n# Create the workflow\nflu_wflow3 <- \n      workflow() %>%\n      add_model(linear) %>%\n        add_recipe(linear_recipe)\nflu_wflow3\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\n\n\n\nModel 1 Evaluation\nNow that we have created the workflow, we can fit the model to the training and test data sets created previously.\n\ntraining_fit1 <- flu_wflow3 %>%\n                fit(data = training_data1)\ntest_fit1 <- flu_wflow3 %>%\n                fit(data = test_data1)\n\nThe next step is to use the trained workflows, training_fit, to predict with unseen test data.\n\npredict(training_fit1, test_data1)\n\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n\n\n# A tibble: 183 × 1\n   .pred\n   <dbl>\n 1 100. \n 2  99.8\n 3  98.9\n 4  98.7\n 5  99.6\n 6  99.7\n 7  98.9\n 8  99.6\n 9  99.7\n10  99.5\n# ℹ 173 more rows\n\n\nWe now want to compare the estimates. To do this, we use augment().\n\ntraining_aug3 <- augment(training_fit1, training_data1)\n\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n\ntest_aug3 <- augment(test_fit1, test_data1)\n\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n\n\n\ntest_aug3 %>%\n  select(BodyTemp,.pred)\n\n# A tibble: 183 × 2\n   BodyTemp .pred\n      <dbl> <dbl>\n 1    102.   99.3\n 2     97.9  99.6\n 3     99    98.6\n 4     98.1  98.7\n 5     99.5  98.8\n 6     98.8  98.5\n 7    102.   99.2\n 8    100.   99.2\n 9     98.1  99.6\n10     98    99.0\n# ℹ 173 more rows\n\n\nIf we want to assess how well the model makes predictions, we can use Root Mean Square Error (RMSE)to evaluate the model on the training_data1 and the test_data1. The lower the RMSE number the better the model fit is. #for training data\n\ntraining_aug3 %>%\n      rmse(BodyTemp, .pred)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        1.15\n\n\n#Now, same for test_data.\n\ntest_aug3 %>%\n      rmse(BodyTemp, .pred)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.896\n\n\nThe training model RMSE is 1.15 and the test data RMSE is 0.89. These numbers tell us the difference between the predicted value and the value in the dataset. It seems both training and test models performed well.\n\nAlternative Model with only 1 predictor\nNow, lets repeat these steps with only 1 predictor.The steps are similar to the above procedure. The model type linear remains the same while the recipe changes to include only 1 predictor “RunnyNose”.\n\nlinear2 <- recipe(BodyTemp ~ RunnyNose, data = training_data1)\n\nflu_wflow4 <- \n        workflow() %>%\n        add_model(linear) %>%\n        add_recipe(linear2)\n\ntraining_fit2 <- flu_wflow4 %>%\n        fit(data = training_data1)\n\ntest_fit2 <- flu_wflow4 %>%\n        fit(data = test_data1)\n\ntraining_aug4 <- augment(training_fit2, training_data1)\ntest_aug4 <- augment(test_fit2, test_data1)\n\nLets look at the RMSE for training model.\n\ntraining_aug4 %>%\n     select(BodyTemp, RunnyNose,.pred)\n\n# A tibble: 547 × 3\n   BodyTemp RunnyNose .pred\n      <dbl> <fct>     <dbl>\n 1     99.2 Yes        98.9\n 2    101.  Yes        98.9\n 3    101   Yes        98.9\n 4     98.7 Yes        98.9\n 5    102.  No         99.2\n 6     97.8 Yes        98.9\n 7     98.5 Yes        98.9\n 8    102.  Yes        98.9\n 9     98.4 Yes        98.9\n10     99.3 No         99.2\n# ℹ 537 more rows\n\n\n\ntraining_aug4 %>%\n  rmse(BodyTemp,.pred)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        1.24\n\n\nCalculate RMSE for testing model\n\ntest_aug4 %>%\n     select(BodyTemp, RunnyNose,.pred)\n\n# A tibble: 183 × 3\n   BodyTemp RunnyNose .pred\n      <dbl> <fct>     <dbl>\n 1    102.  Yes        98.7\n 2     97.9 No         99.0\n 3     99   Yes        98.7\n 4     98.1 Yes        98.7\n 5     99.5 No         99.0\n 6     98.8 No         99.0\n 7    102.  No         99.0\n 8    100.  Yes        98.7\n 9     98.1 No         99.0\n10     98   Yes        98.7\n# ℹ 173 more rows\n\n\n\ntest_aug4 %>%\n  rmse(BodyTemp,.pred)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.986\n\n\n\n\n\nConclusion\nModel 1 with ALL predictors\nRMSE for training:1.15\nRMSE for testing:0.89\nAlternative model with only 1 predictor\nRMSE for training:1.24\nRMSE for testing:0.98\nOverall, based on the RMSE values, it looks like model 1 with all predictors included is a better fit than the alternative model."
  },
  {
    "objectID": "fluanalysis/code/wrangling.html",
    "href": "fluanalysis/code/wrangling.html",
    "title": "Flu Data Analysis",
    "section": "",
    "text": "First, we load the tidyverse package.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.2\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.2.0     ✔ stringr 1.5.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\nWarning: package 'ggplot2' was built under R version 4.2.2\n\n\nWarning: package 'dplyr' was built under R version 4.2.2\n\n\nWarning: package 'stringr' was built under R version 4.2.2\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nNext, using the here() function and using the readRDS function, we import the SympAct_Any_Pos.Rda file.\n\nsympact_raw <- here::here(\"fluanalysis\",\"data\",\"raw_data\",\"SympAct_Any_Pos.Rda\")\nflu_data_raw <- readRDS(sympact_raw)\nsummary(flu_data_raw)\n\n                                           DxName1   \n Influenza like illness - Clinical Dx          :328  \n Influenza - Virus Identified                  :131  \n Fever, unspecified                            :101  \n Cough                                         : 66  \n Acute pharyngitis, unspecified                : 50  \n Acute upper respiratory infection, unspecified: 22  \n (Other)                                       : 37  \n                                 DxName2   \n Influenza - Virus Identified        :126  \n Influenza like illness - Clinical Dx:115  \n Fever, unspecified                  : 45  \n Cough                               : 41  \n Acute pharyngitis, unspecified      : 31  \n (Other)                             : 97  \n NA's                                :280  \n                                 DxName3   \n Influenza - Virus Identified        : 23  \n Influenza like illness - Clinical Dx: 14  \n Cough                               : 10  \n Fever, unspecified                  :  6  \n Acute pharyngitis, unspecified      :  4  \n (Other)                             : 52  \n NA's                                :626  \n                                           DxName4   \n Influenza - Virus Identified                  :  3  \n Acute upper respiratory infection, unspecified:  2  \n Encounter for immunization                    :  2  \n Influenza like illness - Clinical Dx          :  2  \n Acute pharyngitis, unspecified                :  1  \n (Other)                                       :  9  \n NA's                                          :716  \n                                                                                               DxName5   \n Acute suppurative otitis media without spontaneous rupture of ear drum, right ear                 :  0  \n Encounter for immunization                                                                        :  0  \n Headache                                                                                          :  1  \n Other infectious mononucleosis without complication                                               :  0  \n Strain of other flexor muscle, fascia and tendon at forearm level, right arm, subsequent encounter:  0  \n NA's                                                                                              :734  \n                                                                                                         \n Unique.Visit       ActivityLevel    ActivityLevelF SwollenLymphNodes\n Length:735         Min.   : 0.000   3      :125    No :421          \n Class :character   1st Qu.: 3.000   5      : 97    Yes:314          \n Mode  :character   Median : 4.000   4      : 95                     \n                    Mean   : 4.463   2      : 80                     \n                    3rd Qu.: 6.000   7      : 68                     \n                    Max.   :10.000   6      : 66                     \n                                     (Other):204                     \n ChestCongestion ChillsSweats NasalCongestion CoughYN   Sneeze    Fatigue  \n No :326         No :131      No :170         No : 75   No :340   No : 64  \n Yes:409         Yes:604      Yes:565         Yes:660   Yes:395   Yes:671  \n                                                                           \n                                                                           \n                                                                           \n                                                                           \n                                                                           \n SubjectiveFever Headache      Weakness   WeaknessYN  CoughIntensity CoughYN2 \n No :230         No :115   None    : 49   No : 49    None    : 47    No : 47  \n Yes:505         Yes:620   Mild    :224   Yes:686    Mild    :156    Yes:688  \n                           Moderate:341              Moderate:360             \n                           Severe  :121              Severe  :172             \n                                                                              \n                                                                              \n                                                                              \n     Myalgia    MyalgiaYN RunnyNose AbPain    ChestPain Diarrhea  EyePn    \n None    : 79   No : 79   No :211   No :642   No :501   No :636   No :622  \n Mild    :214   Yes:656   Yes:524   Yes: 93   Yes:234   Yes: 99   Yes:113  \n Moderate:327                                                              \n Severe  :115                                                              \n                                                                           \n                                                                           \n                                                                           \n Insomnia  ItchyEye  Nausea    EarPn     Hearing   Pharyngitis Breathless\n No :316   No :553   No :477   No :573   No :705   No :121     No :438   \n Yes:419   Yes:182   Yes:258   Yes:162   Yes: 30   Yes:614     Yes:297   \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n ToothPn   Vision    Vomit     Wheeze       BodyTemp     \n No :569   No :716   No :656   No :514   Min.   : 97.20  \n Yes:166   Yes: 19   Yes: 79   Yes:221   1st Qu.: 98.20  \n                                         Median : 98.50  \n                                         Mean   : 98.94  \n                                         3rd Qu.: 99.30  \n                                         Max.   :103.10  \n                                         NA's   :5       \n                                RapidFluA  \n Positive for Influenza A            :169  \n Presumptive Negative For Influenza A:159  \n NA's                                :407  \n                                           \n                                           \n                                           \n                                           \n                                RapidFluB                        PCRFluA   \n Positive for Influenza B            : 26    Influenza A Detected    :120  \n Presumptive Negative For Influenza B:302    Influenza A Not Detected: 33  \n NA's                                :407   Assay Invalid            :  0  \n                                            Indeterminate            :  1  \n                                            NA's                     :581  \n                                                                           \n                                                                           \n                      PCRFluB     TransScore1    TransScore1F  TransScore2   \n  Influenza B Detected    :  9   Min.   :0.000   0: 13        Min.   :0.000  \n  Influenza B Not Detected:145   1st Qu.:3.000   1: 53        1st Qu.:2.000  \n Assay Invalid            :  0   Median :4.000   2:107        Median :3.000  \n NA's                     :581   Mean   :3.473   3:157        Mean   :2.917  \n                                 3rd Qu.:5.000   4:210        3rd Qu.:4.000  \n                                 Max.   :5.000   5:195        Max.   :4.000  \n                                                                             \n TransScore2F  TransScore3    TransScore3F  TransScore4    TransScore4F\n 0: 13        Min.   :0.000   0: 24        Min.   :0.000   0: 50       \n 1: 89        1st Qu.:1.000   1:166        1st Qu.:2.000   1:103       \n 2:138        Median :2.000   2:222        Median :3.000   2:154       \n 3:201        Mean   :2.148   3:323        Mean   :2.576   3:230       \n 4:294        3rd Qu.:3.000                3rd Qu.:4.000   4:198       \n              Max.   :3.000                Max.   :4.000               \n                                                                       \n  ImpactScore      ImpactScore2     ImpactScore3    ImpactScoreF ImpactScore2F\n Min.   : 2.000   Min.   : 2.000   Min.   : 0.00   8      :105   7      :107  \n 1st Qu.: 8.000   1st Qu.: 7.000   1st Qu.: 3.00   9      :104   8      :102  \n Median : 9.000   Median : 8.000   Median : 5.00   10     : 88   9      : 90  \n Mean   : 9.514   Mean   : 8.581   Mean   : 5.06   7      : 84   10     : 86  \n 3rd Qu.:11.000   3rd Qu.:10.000   3rd Qu.: 7.00   11     : 82   6      : 85  \n Max.   :18.000   Max.   :17.000   Max.   :13.00   12     : 58   11     : 59  \n                                                   (Other):214   (Other):206  \n ImpactScore3F ImpactScoreFD   TotalSymp1     TotalSymp1F    TotalSymp2   \n 4      :134   8      :105   Min.   : 5.00   12     : 86   Min.   : 4.00  \n 5      :112   9      :104   1st Qu.:11.00   13     : 84   1st Qu.:10.00  \n 3      :108   10     : 88   Median :13.00   14     : 80   Median :12.00  \n 6      :102   7      : 84   Mean   :12.99   11     : 72   Mean   :12.43  \n 7      : 66   11     : 82   3rd Qu.:15.00   10     : 62   3rd Qu.:15.00  \n 2      : 64   12     : 58   Max.   :23.00   15     : 61   Max.   :22.00  \n (Other):149   (Other):214                   (Other):290                  \n   TotalSymp3   \n Min.   : 3.00  \n 1st Qu.:10.00  \n Median :12.00  \n Mean   :11.66  \n 3rd Qu.:14.00  \n Max.   :21.00  \n                \n\n\nThe following are steps taken to clean the data set for exploration:\n\nWe can use !c() with the contains() function to exclude variables that we do not want to analyze.\nFinally, we use drop_na() to remove all NA observations.\nWe use anyNA() and glimpse() to determine if the previous steps worked properly.\n\n\nflu_data_clean <- flu_data_raw %>%\n                select(!c(contains(c(\"Score\",\"Total\",\"FluA\",\"FluB\",\"Dxname\",\"Activity\")),\"Unique.Visit\")) %>%\n                drop_na()\nanyNA(flu_data_clean)\n\n[1] FALSE\n\nglimpse(flu_data_clean)\n\nRows: 730\nColumns: 32\n$ SwollenLymphNodes <fct> Yes, Yes, Yes, Yes, Yes, No, No, No, Yes, No, Yes, Y…\n$ ChestCongestion   <fct> No, Yes, Yes, Yes, No, No, No, Yes, Yes, Yes, Yes, Y…\n$ ChillsSweats      <fct> No, No, Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, Yes, …\n$ NasalCongestion   <fct> No, Yes, Yes, Yes, No, No, No, Yes, Yes, Yes, Yes, Y…\n$ CoughYN           <fct> Yes, Yes, No, Yes, No, Yes, Yes, Yes, Yes, Yes, No, …\n$ Sneeze            <fct> No, No, Yes, Yes, No, Yes, No, Yes, No, No, No, No, …\n$ Fatigue           <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ SubjectiveFever   <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, Yes…\n$ Headache          <fct> Yes, Yes, Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes…\n$ Weakness          <fct> Mild, Severe, Severe, Severe, Moderate, Moderate, Mi…\n$ WeaknessYN        <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ CoughIntensity    <fct> Severe, Severe, Mild, Moderate, None, Moderate, Seve…\n$ CoughYN2          <fct> Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes, Yes, Yes…\n$ Myalgia           <fct> Mild, Severe, Severe, Severe, Mild, Moderate, Mild, …\n$ MyalgiaYN         <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ RunnyNose         <fct> No, No, Yes, Yes, No, No, Yes, Yes, Yes, Yes, No, No…\n$ AbPain            <fct> No, No, Yes, No, No, No, No, No, No, No, Yes, Yes, N…\n$ ChestPain         <fct> No, No, Yes, No, No, Yes, Yes, No, No, No, No, Yes, …\n$ Diarrhea          <fct> No, No, No, No, No, Yes, No, No, No, No, No, No, No,…\n$ EyePn             <fct> No, No, No, No, Yes, No, No, No, No, No, Yes, No, Ye…\n$ Insomnia          <fct> No, No, Yes, Yes, Yes, No, No, Yes, Yes, Yes, Yes, Y…\n$ ItchyEye          <fct> No, No, No, No, No, No, No, No, No, No, No, No, Yes,…\n$ Nausea            <fct> No, No, Yes, Yes, Yes, Yes, No, No, Yes, Yes, Yes, Y…\n$ EarPn             <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, Yes, Y…\n$ Hearing           <fct> No, Yes, No, No, No, No, No, No, No, No, No, No, No,…\n$ Pharyngitis       <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, No, No, No, Yes, …\n$ Breathless        <fct> No, No, Yes, No, No, Yes, No, No, No, Yes, No, Yes, …\n$ ToothPn           <fct> No, No, Yes, No, No, No, No, No, Yes, No, No, Yes, N…\n$ Vision            <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n$ Vomit             <fct> No, No, No, No, No, No, Yes, No, No, No, Yes, Yes, N…\n$ Wheeze            <fct> No, No, No, Yes, No, Yes, No, No, No, No, No, Yes, N…\n$ BodyTemp          <dbl> 98.3, 100.4, 100.8, 98.8, 100.5, 98.4, 102.5, 98.4, …\n\n\nFinally, we save the cleaned data set into the processed_data folder using the saveRDS() function.\n\nflu_clean <- here::here(\"fluanalysis\",\"data\",\"processed_data\",\"flu_data_processed\")\nsaveRDS(flu_data_clean,file=flu_clean)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis Portfolio - Vijay Panthayi",
    "section": "",
    "text": "Hello!\n\nIt is a pleasure to meet you.\nWelcome to my website and my data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "visualization_exercise.html",
    "href": "visualization_exercise.html",
    "title": "Visualization Exercise",
    "section": "",
    "text": "##Introduction\nFor this exercise, I decided to recreate the graph produced by FiveThirtyEight on What Do Men Think It Means to Be a Man?. The article states that they asked 1,600 men whether #MeToo changed their thinking on masculinity. The specific graph in question which I shall attempt to recreate is the one labeled by the question it represents: “Do you think that society puts pressure on men in a way that is unhealthy or bad for them?”.\nThis is the original figure:\n\nThe rest of this page will showcase the process and the code it took to recreate this graph.\n##Code/Detailing\nFirst, we want to load the packages necessary to recreate the graph.\n\n#loading the necessary packages\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(here)\n\nhere() starts at C:/Users/vjpan/Desktop/MADA/MADA2023/vijaypanthayi-MADA-portfolio\n\nlibrary(ggpubr)\n\nWarning: package 'ggpubr' was built under R version 4.2.3\n\nlibrary(ggthemes)\n\nNext, we want to import the raw data into R.\n\n#import the raw data with here() function so it can be replicated on other devices\nraw_masculinity <- read.csv(here(\"data\",\"masculinity-survey.csv\"))\n\n#glimpse of the data\nglimpse(raw_masculinity)\n\nRows: 232\nColumns: 12\n$ AMONG.ADULT.MEN    <chr> \"\", \"In general, how masculine or \\\"manly\\\" do you …\n$ X                  <chr> \"\", \"\", \"Very masculine\", \"Somewhat masculine\", \"No…\n$ Adult.Men          <chr> \"\", \"\", \"37%\", \"46%\", \"11%\", \"5%\", \"1%\", \"\", \"16%\",…\n$ Age                <chr> \"18 - 34\", \"\", \"29%\", \"47%\", \"13%\", \"10%\", \"0%\", \"\"…\n$ X.1                <chr> \"35 - 64\", \"\", \"42%\", \"46%\", \"9%\", \"2%\", \"1%\", \"\", …\n$ X.2                <chr> \"65 and up\", \"\", \"37%\", \"47%\", \"13%\", \"3%\", \"1%\", \"…\n$ Race               <chr> \"White\", \"\", \"34%\", \"50%\", \"11%\", \"4%\", \"1%\", \"\", \"…\n$ X.3                <chr> \"Non-white\", \"\", \"44%\", \"39%\", \"11%\", \"6%\", \"0%\", \"…\n$ Children           <chr> \"Has children\", \"\", \"43%\", \"47%\", \"6%\", \"3%\", \"1%\",…\n$ X.4                <chr> \"No children\", \"\", \"30%\", \"46%\", \"17%\", \"6%\", \"0%\",…\n$ Sexual.Orientation <chr> \"Straight\", \"\", \"40%\", \"47%\", \"10%\", \"3%\", \"1%\", \"\"…\n$ X.5                <chr> \"Gay/Bisexual\", \"\", \"21%\", \"49%\", \"19%\", \"10%\", \"0%…\n\n\nNow that we have loaded the data and ensured it was imported correctly, we need to create a new data set containing only the data necessary to create this graph. In this case, it will be only the data under the question labeled “Do you think that society puts pressure on men in a way that is unhealthy or bad for them?”. By the way the data was organized, it seemed easier to just make a new data sheet containing only the table of data that was necessary for this exercise.\n\n#import the raw necessary data with here() function so it can be replicated on other devices\nraw_necessary <- read.csv(here(\"data\",\"masculinity-survey-exercise.csv\"))\n\n#print out the data sheet for the graph\nraw_necessary\n\n    Response     Age_Group Percentage\n1        Yes All Adult Men       0.60\n2         No All Adult Men       0.39\n3  No Answer All Adult Men       0.01\n4        Yes         18-34       0.70\n5         No         18-34       0.29\n6  No Answer         18-34       0.01\n7        Yes         35-64       0.57\n8         No         35-64       0.42\n9  No Answer         35-64       0.01\n10       Yes           65+       0.53\n11        No           65+       0.46\n12 No Answer           65+       0.01\n\n\nWe have the data needed from the original data set to recreate the graph from the article. The following steps were taken to try to recreate the original graph.\n\n#create the plot (creating a stacked bar graph)\nfinalplot <- ggplot(data=raw_necessary, aes(x = Age_Group , y = Percentage, fill = Response)) +\n  #make the graph fill from 0-100 (to show percentages)\n  geom_col(position = \"fill\", width = .45) +\n  #alter the width and color of the bars\n  scale_fill_manual(values=c(\"Yes\"='brown1',\n                             \"No Answer\"='grey',\n                             \"No\"='cyan3')) +\n  #flip the coordinates of the graph so it goes to the side rather than up and down\n  coord_flip() +\n  #changes the scales from 0-1 to 0%-100%\n  scale_y_continuous(labels = scales::percent) +\n  #Sets up the title and subtitle to be similar, but not accurately, akin to the original graph\n  labs(title='Do you think that society puts pressure on men in a way \\nthat is unhealthy or bad for them?',\n       subtitle='DATES                              NO. OF RESPONDENTS\\nMay 10-22, 2018               1,615 adult men')\n\n#prints the final plot, removed the axis titles, removed grid and background\nfinalplotbase <- finalplot + theme_fivethirtyeight()\nfinalplotbase\n\n\n\n#THE FOLLOWING WAS IN PLACE PRIOR TO HELP/REVIEW FROM BETELIHEM\n  #theme(axis.title.x = element_blank(),\n   #       axis.title.y = element_blank(),\n    #      panel.grid.major = element_blank(), \n     #     panel.grid.minor = element_blank(),\n      #    panel.background = element_blank(), \n       #   axis.line = element_line(colour = \"black\"))\n\nThis does not look EXACTLY like the original, but it is a close copy to it.\nThings of note I am not able to make exact:\n1.The order of the values for age group bars\n2.Label the bars ON the graph (hence the legend)\n3.Split up All Adult Men from the individual age groups, but still have all of the bars on the same graph\nFurther examination of the R code and learning what is capable with R may be necessary to make a direct replica from the one posted by FiveThirtyEight. In addition, something that has been shown to be possible on their website, but I am not fully aware of how to do, is making the graph interactive with the mouse. This will also require further learning and examination of the R language and packages."
  },
  {
    "objectID": "tidytuesday_exercise.html",
    "href": "tidytuesday_exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "###Implement all necessary libraries/packages\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(dplyr)\nlibrary(tidytuesdayR)\nlibrary(tidymodels)\nlibrary(ggplot2)\n\n###About the Data Set According to the TidyTuesday authors, the data set we will explore today is “a dataset collected at Hewlett-Packard Labs by Mark Hopkins, Erik Reeber, George Forman, and Jaap Suermondt and shared with the UCI Machine Learning Repository. The dataset classifies 4601 e-mails as spam or non-spam, with additional variables indicating the frequency of certain words and characters in the e-mail”.\n###Load in the Data\n\ntuesdata <- tidytuesdayR::tt_load('2023-08-15')\n\n\n    Downloading file 1 of 1: `spam.csv`\n\nspam <- tuesdata$spam\nspam\n\n# A tibble: 4,601 × 7\n   crl.tot dollar  bang money  n000  make yesno\n     <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <chr>\n 1     278  0     0.778  0     0     0    y    \n 2    1028  0.18  0.372  0.43  0.43  0.21 y    \n 3    2259  0.184 0.276  0.06  1.16  0.06 y    \n 4     191  0     0.137  0     0     0    y    \n 5     191  0     0.135  0     0     0    y    \n 6      54  0     0      0     0     0    y    \n 7     112  0.054 0.164  0     0     0    y    \n 8      49  0     0      0     0     0    y    \n 9    1257  0.203 0.181  0.15  0     0.15 y    \n10     749  0.081 0.244  0     0.19  0.06 y    \n# ℹ 4,591 more rows\n\n\n###Cleaning the Data Before we begin exploring the data, lets clean up anything that might make it difficult to explore.\n\n##This will make sure the yes/no column only contains y/n\nunique(spam$yesno)\n\n[1] \"y\" \"n\"\n\n##Ensure that the other variables contain only numbers for their values\nglimpse(spam$crl.tot)\n\n num [1:4601] 278 1028 2259 191 191 ...\n\nglimpse(spam$n000)\n\n num [1:4601] 0 0.43 1.16 0 0 0 0 0 0 0.19 ...\n\nglimpse(spam$dollar)\n\n num [1:4601] 0 0.18 0.184 0 0 0 0.054 0 0.203 0.081 ...\n\nglimpse(spam$bang)\n\n num [1:4601] 0.778 0.372 0.276 0.137 0.135 0 0.164 0 0.181 0.244 ...\n\nglimpse(spam$money)\n\n num [1:4601] 0 0.43 0.06 0 0 0 0 0 0.15 0 ...\n\nglimpse(spam$make)\n\n num [1:4601] 0 0.21 0.06 0 0 0 0 0 0.15 0.06 ...\n\n##Since dollar, bang, money, and make are all percentages, let's make sure there are no values over 1 or below 0\nspam %>% count(dollar > 1, dollar < 0)\n\n# A tibble: 2 × 3\n  `dollar > 1` `dollar < 0`     n\n  <lgl>        <lgl>        <int>\n1 FALSE        FALSE         4565\n2 TRUE         FALSE           36\n\nspam %>% count(bang > 1, bang < 0)\n\n# A tibble: 2 × 3\n  `bang > 1` `bang < 0`     n\n  <lgl>      <lgl>      <int>\n1 FALSE      FALSE       4320\n2 TRUE       FALSE        281\n\nspam %>% count(money > 1, money < 0)\n\n# A tibble: 2 × 3\n  `money > 1` `money < 0`     n\n  <lgl>       <lgl>       <int>\n1 FALSE       FALSE        4512\n2 TRUE        FALSE          89\n\nspam %>% count(make > 1, make < 0)\n\n# A tibble: 2 × 3\n  `make > 1` `make < 0`     n\n  <lgl>      <lgl>      <int>\n1 FALSE      FALSE       4508\n2 TRUE       FALSE         93\n\n##In each variable, there are some observations where their percentage value is greater than 1 which is not logical. We will remove these observations.\nspam_clean <- subset(spam, !(dollar > 1))\nspam_clean <- subset(spam, !(bang >1))\nspam_clean <- subset(spam, !(money >1))\nspam_clean <- subset(spam, !(make >1))\n\n##Cleaned Data Set\nglimpse(spam_clean)\n\nRows: 4,508\nColumns: 7\n$ crl.tot <dbl> 278, 1028, 2259, 191, 191, 54, 112, 49, 1257, 749, 21, 184, 26…\n$ dollar  <dbl> 0.000, 0.180, 0.184, 0.000, 0.000, 0.000, 0.054, 0.000, 0.203,…\n$ bang    <dbl> 0.778, 0.372, 0.276, 0.137, 0.135, 0.000, 0.164, 0.000, 0.181,…\n$ money   <dbl> 0.00, 0.43, 0.06, 0.00, 0.00, 0.00, 0.00, 0.00, 0.15, 0.00, 0.…\n$ n000    <dbl> 0.00, 0.43, 1.16, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.19, 0.…\n$ make    <dbl> 0.00, 0.21, 0.06, 0.00, 0.00, 0.00, 0.00, 0.00, 0.15, 0.06, 0.…\n$ yesno   <chr> \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y…\n\n\n###Explore the Data Let’s find out how many e-mails were flagged to be spam versus not spam.\n\nspam_clean %>% count(yesno)\n\n# A tibble: 2 × 2\n  yesno     n\n  <chr> <int>\n1 n      2737\n2 y      1771\n\n\nWe are going to focus this exploration on the aspect of money being involved in spam e-mails. Let’s try comparing how many times the word ‘money’ appears compared to the ‘$’ sign.\n\nspam_clean %>% count(money == 0, money > 0)\n\n# A tibble: 2 × 3\n  `money == 0` `money > 0`     n\n  <lgl>        <lgl>       <int>\n1 FALSE        TRUE          707\n2 TRUE         FALSE        3801\n\nspam_clean %>% count(dollar == 0, dollar > 0)\n\n# A tibble: 2 × 3\n  `dollar == 0` `dollar > 0`     n\n  <lgl>         <lgl>        <int>\n1 FALSE         TRUE          1368\n2 TRUE          FALSE         3140\n\nspam_clean %>% count(money == 0, dollar == 0)\n\n# A tibble: 4 × 3\n  `money == 0` `dollar == 0`     n\n  <lgl>        <lgl>         <int>\n1 FALSE        FALSE           591\n2 FALSE        TRUE            116\n3 TRUE         FALSE           777\n4 TRUE         TRUE           3024\n\n\nWe can see that there is approximately double the amount of e-mails that contain the dollar sign than the word money. In addition, of the approximately 1400 e-mails that contain the ‘$’, only 600 of them also contain the word ‘money’. This may indicate that it is highly likely that scammers find more success with the dollar sign.\nFinally, let’s plot how many e-mails contain money and $ and whether they are marked as spam or not.\n\nspam_clean_money <- spam_clean\nspam_clean_money$money[spam_clean_money$money > 0] <- 1\nspam_clean_money$money[spam_clean_money$dollar > 0] <- 1\nglimpse(spam_clean_money$money)\n\n num [1:4508] 0 1 1 0 0 0 1 0 1 1 ...\n\nglimpse(spam_clean_money$dollar)\n\n num [1:4508] 0 0.18 0.184 0 0 0 0.054 0 0.203 0.081 ...\n\n\nFrom here we could create a bar plot showing how much of a trend there is between the existence of ‘money’, ‘$’, and both in spam e-mails."
  }
]